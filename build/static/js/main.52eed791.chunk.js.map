{"version":3,"sources":["components/Note.js","services/notes.js","components/Notification.js","components/Footer.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","onClick","content","baseUrl","axios","get","then","response","data","newObject","post","id","put","Notification","message","Footer","style","color","fontStyle","fontSize","marginTop","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","console","log","noteService","initialNotes","catch","e","notesToShow","filter","map","find","changedNote","returnedNote","setTimeout","n","toggleImportanceOf","onSubmit","preventDefault","noteObject","date","Date","toISOString","Math","random","concat","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"gLAaeA,EAXF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACdC,EAAQF,EAAKG,UAAY,qBAAuB,iBAEtD,OACE,qBAAIC,UAAU,OAAd,UACE,wBAAQC,QAASJ,EAAjB,SAAoCC,IACnC,IAAKF,EAAKM,Y,gBCHXC,EAAU,aAkBD,EAhBA,WAEb,OADgBC,IAAMC,IAAIF,GACXG,MAAK,SAACC,GAAD,OAAcA,EAASC,SAc9B,EAXA,SAACC,GAEd,OADgBL,IAAMM,KAAKP,EAASM,GACrBH,MAAK,SAACC,GAAD,OAAcA,EAASC,SAS9B,EANA,SAACG,EAAIF,GAElB,OADgBL,IAAMQ,IAAN,UAAaT,EAAb,YAAwBQ,GAAMF,GAC/BH,MAAK,SAACC,GAAD,OAAcA,EAASC,SCX9BK,EARM,SAAC,GAAe,IAAdC,EAAa,EAAbA,QACrB,OACE,qBAAKd,UAAU,QAAf,SACGc,KCaQC,EAhBA,WAOb,OACE,qBAAKC,MAPa,CAClBC,MAAO,QACPC,UAAW,SACXC,SAAU,GACVC,UAAW,IAGX,SACE,kGCqFSC,EAxFH,WAAO,IAAD,EACUC,mBAAS,IADnB,mBACTC,EADS,KACFC,EADE,OAEcF,mBAAS,mBAFvB,mBAETG,EAFS,KAEAC,EAFA,OAGcJ,oBAAS,GAHvB,mBAGTK,EAHS,KAGAC,EAHA,OAIwBN,mBAAS,MAJjC,mBAITO,EAJS,KAIKC,EAJL,KAiBhBC,qBAXa,WACXC,QAAQC,IAAI,mBACZC,IAEG5B,MAAK,SAAC6B,GACLH,QAAQC,IAAI,qBACZT,EAASW,MAEVC,OAAM,SAACC,GAAD,OAAOL,QAAQC,IAAI,QAASI,QAGvB,IAEhB,IAwCMC,EAAcX,EAAUJ,EAAQA,EAAMgB,QAAO,SAAC3C,GAAD,OAAUA,EAAKG,aAElE,OACE,gCACE,uCACA,cAAC,EAAD,CAAce,QAASe,IACvB,8BACE,yBAAQ5B,QAAS,kBAAM2B,GAAYD,IAAnC,kBACQA,EAAU,YAAc,WAGlC,6BACGW,EAAYE,KAAI,SAAC5C,GAAD,OACf,cAAC,EAAD,CAEEA,KAAMA,EACNC,iBAAkB,kBAlCD,SAACc,GAC1B,IAAMf,EAAO2B,EAAMkB,MAAK,SAAC7C,GAAD,OAAUA,EAAKe,KAAOA,KACxC+B,EAAW,2BAAQ9C,GAAR,IAAcG,WAAYH,EAAKG,YAEhDmC,EACUvB,EAAI+B,GACXpC,MAAK,SAACqC,GACLnB,EAASD,EAAMiB,KAAI,SAAC5C,GAAD,OAAWA,EAAKe,KAAOA,EAAKf,EAAO+C,SAEvDP,OAAM,SAACC,GACNP,EAAgB,aAAD,OAAclC,EAAKM,QAAnB,0CACf0C,YAAW,WACTd,EAAgB,QACf,KACHN,EAASD,EAAMgB,QAAO,SAAAM,GAAC,OAAIA,EAAElC,KAAOA,SAoBRmC,CAAmBlD,EAAKe,MAF3Cf,EAAKe,SAMhB,uBAAMoC,SA5DM,SAACV,GACfA,EAAEW,iBACF,IAAMC,EAAa,CACjB/C,QAASuB,EACTyB,MAAM,IAAIC,MAAOC,cACjBrD,UAAWsD,KAAKC,SAAW,IAG7BpB,EACUe,GACP3C,MAAK,SAACqC,GACLX,QAAQC,IAAIU,GACZnB,EAASD,EAAMgC,OAAOZ,OAEvBP,OAAM,SAACC,GAAD,OAAOL,QAAQC,IAAI,QAASI,MACrCX,EAAW,KA6CT,UACE,uBAAO8B,MAAO/B,EAASgC,SA3CJ,SAACpB,GACxBX,EAAWW,EAAEqB,OAAOF,UA2ChB,wBAAQG,KAAK,SAAb,qBAEF,cAAC,EAAD,Q,MCpFNC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.52eed791.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Note = ({ note, toggleImportance }) => {\n  const label = note.important ? \"make not important\" : \"make important\";\n\n  return (\n    <li className='note'>\n      <button onClick={toggleImportance}>{label}</button>\n      {\" \"}{note.content}\n    </li>\n  );\n};\n\nexport default Note;\n","import axios from \"axios\";\n\n// const baseUrl = \"http://localhost:3001/api/notes\";\n\n// Because build folder is relative to server\nconst baseUrl = \"/api/notes\"; \n\nconst getAll = () => {\n  const request = axios.get(baseUrl);\n  return request.then((response) => response.data);\n};\n\nconst create = (newObject) => {\n  const request = axios.post(baseUrl, newObject);\n  return request.then((response) => response.data);\n};\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject);\n  return request.then((response) => response.data);\n};\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default { getAll, create, update };\n","const Notification = ({message}) => {\n  return(\n    <div className='error'>\n      {message}\n    </div>\n  )\n}\n\nexport default Notification;","const Footer = () => {\n  const footerStyle = {\n    color: \"green\",\n    fontStyle: \"italic\",\n    fontSize: 16,\n    marginTop: 20,\n  };\n  return (\n    <div style={footerStyle}>\n      <em>\n        Note app, by Llewellyn Dsouza - part of the FullStackOpen.com\n      </em>\n    </div>\n  );\n};\n\nexport default Footer;","import React, { useEffect, useState } from \"react\";\nimport Note from \"./components/Note\";\nimport noteService from \"./services/notes\";\nimport Notification from './components/Notification';\nimport Footer from './components/Footer';\n\nconst App = () => {\n  const [notes, setNotes] = useState([]);\n  const [newNote, setNewNote] = useState(\"add new note...\");\n  const [showAll, setShowAll] = useState(true);\n  const [errorMessage, setErrorMessage] = useState(null);\n\n  const hook = () => {\n    console.log(\"useEffect - App\");\n    noteService\n      .getAll()\n      .then((initialNotes) => {\n        console.log(\"promise fulfilled\");\n        setNotes(initialNotes);\n      })\n      .catch((e) => console.log(\"error\", e));\n  };\n\n  useEffect(hook, []);\n\n  const addNote = (e) => {\n    e.preventDefault();\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() < 0.5,\n    };\n\n    noteService\n      .create(noteObject)\n      .then((returnedNote) => {\n        console.log(returnedNote);\n        setNotes(notes.concat(returnedNote));\n      })\n      .catch((e) => console.log(\"error\", e));\n    setNewNote(\"\");\n  };\n\n  const handleNoteChange = (e) => {\n    setNewNote(e.target.value);\n  };\n\n  const toggleImportanceOf = (id) => {\n    const note = notes.find((note) => note.id === id);\n    const changedNote = { ...note, important: !note.important };\n\n    noteService\n      .update(id, changedNote)\n      .then((returnedNote) => {\n        setNotes(notes.map((note) => (note.id !== id ? note : returnedNote)));\n      })\n      .catch((e) => {\n        setErrorMessage(`the note '${note.content}' was already deleted from the server`);\n        setTimeout(() => {\n          setErrorMessage(null);\n        }, 5000);\n        setNotes(notes.filter(n => n.id !== id))\n      });\n  };\n\n  const notesToShow = showAll ? notes : notes.filter((note) => note.important);\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <Notification message={errorMessage} />\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? \"important\" : \"all\"}\n        </button>\n      </div>\n      <ul>\n        {notesToShow.map((note) => (\n          <Note\n            key={note.id}\n            note={note}\n            toggleImportance={() => toggleImportanceOf(note.id)}\n          />\n        ))}\n      </ul>\n      <form onSubmit={addNote}>\n        <input value={newNote} onChange={handleNoteChange} />\n        <button type=\"submit\">Save</button>\n      </form>\n      <Footer />\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from \"react-dom\";\nimport App from \"./App.js\";\n\nimport './index.css'\n\nReactDOM.render(<App />, document.getElementById(\"root\"));"],"sourceRoot":""}